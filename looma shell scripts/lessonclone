//  clone 'phonics' lessons to be edited for other letters
//
//  file: lessonclone
//  run in MONGO SHELL with: load('lessonclone')
//       or in BASH with:    mongo looma < lessonclone
//      prior to running, set "param" variable:
 //          var param = 'dryrun' or 'run'         // dryrun

//   NOTE: need to first edit the source lesson to fix lesson DN and textfile DNs - remove ch_id and add LETTER to DNs
//
//  NOTE: edit the following variable settings for different souce letter and/or target lettin
//

var newchapter = '1EN02.45';            // chapter ID for new lesson being created as a clone
var newletter = 'Oo';               // letter (in format Aa) for the new lesson

var oldlesson = 'Letter Ee Phonics Lesson';  // existing lesson being cloned
var oldletter = 'Ee';                 // letter (in format Aa) of  the old lesson

var lesson, newlesson, chapter, lessonitem, textfile, newtext, activity, newactivity;
var textfilecount=0;

var now = new Date();
var dd = now.getDate(); var mm = now.getMonth()+1; var yyyy = now.getFullYear();
if(dd<10) dd='0'+dd; if(mm<10) mm='0'+mm;
var today =  (yyyy + '.' + mm + '.' + dd);
print(); print('date is ' + today);print();

    lesson = db.lessons.findOne({'dn':oldlesson});
    print ('Cloning ' + lesson.dn + ' ***  ('+ lesson.date + ') to new letter: ' + newletter);

    if (! lesson.data) print ("lesson has no data - " + lesson.dn);
    else
    { lesson.data.forEach ( function(data)
        { if (data.collection === 'chapters')
            {
                //replace chapter
                // NOTE: chapter collection _id's are the ch_id, so no lookup needed
                //chapter = db.chapters.findOne({_id:newchapter});
                data.id = newchapter;
                print('timeline item of type "chapter" ' + newchapter);
            }
        else if (data.collection === 'activities')
        {
            lessonitem = db.activities.findOne({'_id':ObjectId(data['id'])});

            print('timeline item of type ' + lessonitem.ft);
            //printjson(lessonitem);

            if (lessonitem && lessonitem.ft === 'text')
            {
                textfilecount++;

                // create copy of textfile, rename it and save it

                print('fetching a text file. ID is ' + lessonitem.mongoID);
                print();

                textfile = db.text_files.findOne({_id:lessonitem.mongoID});

                print('opening text file ' + lessonitem.dn);
                //printjson(textfile);

                textfile.dn = textfile.dn.replace(oldletter, newletter);
                textfile.date = today;
                textfile.clone = 'clone';
                delete textfile._id;
                delete textfile.translator;
                delete textfile.nepali;
                if (param === 'run') {
                var result = db.text_files.insert(textfile);
                if (result.nInserted === 1) {
                    //printjson(newtext);


                    newtext = db.text_files.findOne(textfile);
                    print ('  - - created new textfile. dn is ' + newtext.dn);
                    } else {
                        print(' - - - - failed mongodb insert of new text file with ');
                        printjson(result);

                    }
               } else print (' - - - inserting new textfile ' + textfile.dn);

                // CREATE ACtivity for new textfile
                activity = {};
                activity.ft = 'text';
                activity.dn = textfile.dn;
                if (param === 'run') {
                    activity.mongoID = newtext['_id'];
                    db.activities.insert(activity);
                    newactivity = db.activities.findOne(activity);
                    print ('  - - created new activity. _id is ' + newactivity._id);
                    data._id = newactivity['_id'];  // record new text activity in timeline
                } else {
                    print(' - - new activity for textfile ' + activity.dn);
                    printjson(activity);
                }

            }
        }
    });

        // save new lesson
        lesson.dn = 'Letter ' + newletter + ' Phonics Lesson';  // need Part 1 and Part 2 ??? [depends on Kathy]
        delete lesson._id;
        lesson.ft = 'lesson';
        lesson.clone = 'clone';  // or 'none' or BLANK ???
        lesson.date = today;
        if (param === 'run') {
            result = db.lessons.insert(lesson);
            if (result.nInserted === 1) {
            newlesson = db.lessons.findOne(lesson);
            print ('  - - created new lesson named ' + lesson.dn + '( _id is ' + newlesson._id + ')');
             } else {
                print(' - - - - failed mongodb insert of new lesson with ');
                                     printjson(result);
             }
        }
            else printjson(lesson);

        // make activity for new lesson
        activity = {};
        activity.ft = 'lesson';
        if (param === 'run') activity.mongoID = newlesson['_id'];
        activity.dn = lesson.dn;
        activity.ch_id = [newchapter];
        activity.key1 = "Language";
        activity.key2 = "English";
        activity.key3 = "Grammar";
        activity.key4 = "Phonics";
        if (param === 'run') {
            newactivity = db.activities.insert(activity);
            print ('created new activity for lesson ' + lesson.dn + '. The _id is ' + newactivity._id);
        }
        else printjson(activity);
    }

print('Cloned old lesson "' + oldlesson + '" to "'  + lesson.dn + '"');
print(' - -  it has ' + textfilecount + ' textfiles');
print();


