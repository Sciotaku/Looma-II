#!/bin/bash
#
#  filename: loomaNITCupdate
#       VERSION 1.2 for rysnc.net
#       author: skip
#       date:   JUN 2022
#
#  used to update a pre-installed Looma image by installing latest code, database & content
#           only changed or brand new files are transferred
#
#   steps performed:
#       sync newer code files into existing Looma code
#       use mongorestore to load new data into the existing mongo database
#                  (merging into some collections, like 'lessons' and 'text-files')
#       sync newer content files into "content" directory

#RSYNC options used:
#-a  "archive" equivalent to -rlptgoD
#   -r  recursive
#   -l  recreate symlink on the destination
#   -p  preserve permissions
#   -t  preserve modification time
#   -g  preserve group
#   -o  preserve owner
#   -D  transfer devices and specials (NA for Looma)

#-v	    verbose
#-vv	very verbose
#-z  	use compression
#--dry-run
#--size-only [for Content files]
#--delete 	delete files on destination that are not on source
#--perms (=== -p)
#--update   skip files if destination  already exists and has a later date
#--include '.ssh'
#--exclude '.[!.]*'
#--progress show transfer progress
#--stats    print stats at the end

# display result of previous  command
result () {
    if [[ $1 -ne 0 ]]
    then
        echo "****************************************************************"
        echo "ERROR: previous operation returned $1"
    else
        echo "****************************************************************"
        echo "operation successful"
    fi
}

pause () {
   read -p "Paused, press [Enter] to continue"
}

backup () {
    echo
    echo "****************************************************************"
    echo "- preparing to backup current Looma code to LoomaBAK"
    echo "-   *** usually it is OK to skip this step to save time"
    echo -n  "- - continue ('n' recommended) [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
        if [ -d "$TODIR/LoomaBAK" ]
        then
          echo "- deleting old LoomaBAK directory"
          sudo rm -r "$TODIR/LoomaBAK"
          result $?
        fi
        mv    "$TODIR/Looma"   "$TODIR/LoomaBAk"
        result $?
    else
        echo " - - - SKIPPED: backing up Looma code "
    fi
}

checknetworkspeed () {
  # test internet presence and speed
    echo "************************************"
    echo "Testing network connection and speed"
    echo "************************************"
    echo
    t=$(date +%s)
    sudo wget ftp://speedtest.tele2.net/10MB.zip -O /dev/null
    r=$?
    s=$(date +%s)
    if [[ $r -ne 0 ]]
    then
        echo "****************************************************************"
        echo "no internet connection found";exit $r;
    else
        echo "****************************************************************"
       # echo -n "Internet speed is MB/s: ";expr 8 \* 10 / $(($s - $t))
        echo -n  "- - continue at this speed [y/n]?"; read input;
        if [[ $input != "y" ]]
        then
            exit 1
        fi
    fi
}

#function DOSYNC() to exec the rsync. global var $DRYRUNMODE is either "--dry-run" or ""
# call dosync() with $1 = the source directory, $2 = the target directory
dosync () {
    FROM=$1
    TO=$2

    echo; echo "doing RSYNC from $FROM to $TO with parameter $DRYRUNMODE"
    echo; echo "  *** *** if prompted for \"password:\" enter \"looma\"  *** ***"
    echo ""

    # NOTE: RSYNC needs a slash after FROM dir and no slash after TO dir
    rsync -az  $DRYRUNMODE --size-only  \
        --stats  --progress   \
        --perms  --chmod=D777,F777 --chown=looma:looma \
        --exclude '.[!.]*' --exclude='CEHRD'  \
        -e "ssh"   \
       "$FROM/"  "$TO"
}

######
######### start of executed code ##########
######

echo
echo
echo "****************************************************************"
echo "****************************************************************"
echo "****************************************************************"
echo "  - - - THIS IS THE SCRIPT TO UPDATE LOOMA ON CEHRD PORTAL SERVERS - - - "
echo "****************************************************************"
echo "Dont run this on any other Loomas. Follow the instructions and prompts carefully"
echo "****************************************************************"
echo "****************************************************************"
echo "****************************************************************"
echo
echo
echo
echo "****************************************************************"
echo "START UPDATE NITC Looma Server: updating Looma code, database and content"
echo "****************************************************************"
echo "this a DANGEROUS operation and can disable a Looma"
echo "Be sure you have read the instructions"
echo "****************************************************************"
echo

# set up user 'looma' and 'looma-admin' and group 'looma' in case not already present
#groupadd looma
#useradd -g looma looma
#useradd -g looma looma-admin

if [[ $1 = "run" ]]
  then
    DRYRUNMODE=""
  else
    DRYRUNMODE="--dry-run"
fi

CUMULATIVE=0

#####################
##################### user input - choose update from USB stick or from Internet
#####################
    echo; echo "****************************************************************"

    FROMDIR="58191@usw-s008.rsync.net:.."

    echo; echo "****************************************************************"
    echo "-   *** you can check network speed before proceeding"
    echo -n  "- - check and report network speed [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
      checknetworkspeed
    fi
    echo; echo "if prompted for \"password for odroid\" enter \"odroid\"  "

########################### set the target directory ###############

  # set DEFAULT target dir to CEHRD target, but ask user to confirm or to enter another dir
  TODIR="/home/bitnami/htdocs"
  echo
  echo "Target directory default is set to $TODIR)"
  echo
  echo "if that is OK, enter \"yes\", else enter the desired target directory (without a trailing \/): ";read target;
    if [[ $target -ne "yes" ]]
    then
      TODIR=$target
    fi
  echo  "-----------------"
  echo "using target directory $TODIR"
  echo  "-----------------"

###########################  do the transfers ###############

#       [OPTIONAL] copy current Looma code to LoomaBAK
#       NOTE: call to function BACKUP() commented out for now
  backup

    #       install new Looma code
    echo
    echo "****************************************************************"
    echo "- preparing to install new Looma code"
    echo -n  "- - continue ('y' recommended) [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
        #*************RSYNC*********************

        SECONDS=0

        dosync "$FROMDIR/Looma"  "$TODIR/Looma"

        echo "$(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds elapsed."
        CUMULATIVE=$SECONDS
    else
        echo " - - - SKIPPED: installing new Looma code"
    fi

    #       install new Looma database
    echo
    echo "****************************************************************"
    echo "- preparing to update Looma database"
    echo "-   ***note: this will NOT erase any lesson plans or text files already in the database"
    echo -n  "- - continue ('y' recommended) [y/n]?"; read input;

    if [[ $input = "y" ]]
    then

if [[ -d "$TODIR/Looma/mongo-dump/dump/looma" ]]

        then

            # [mongorestore doesnt update existing mongoDB documents that have changes]
            # to fix this, we use the following procedure:
            #     temp save locally created documents (lessons and texts)
            #     update all documents to latest version from the looma archive
            #     then re-load the locally created documents
            # mongoexport collections 'lessons' and 'text_files' to temp files
            # drop db 'looma' so mongorestore from archives will update all documents in the db
            # mongorestore db looma dump from looma archive on USB
            # finally, mongoimport the temp files to collectons 'lessons' and 'text_files'
            #      to re-instate locally created lessons and texts

            mongoexport --db looma --collection lessons --out /tmp/lessonsFromMongo.tmp
            mongoexport --db looma --collection text_files --out /tmp/textsFromMongo.tmp

            mongo --quiet looma < "$TODIR/Looma/looma\ shell\ scripts/loomaDropDatabase"

          mongorestore --quiet --db looma "$TODIR/Looma/mongo-dump/dump/looma/"

            mongoimport --quiet --db looma --collection lessons --file /tmp/lessonsFromMongo.tmp
            mongoimport --quiet --db looma --collection text_files --file /tmp/textsFromMongo.tmp

            rm /tmp/lessonsFromMongo.tmp
            rm /tmp/textsFromMongo.tmp

            result $?
        else echo "ERROR: no source dir ($TODIR/Looma/mongo-dump/dump/looma) for mongo restore"
        fi
    else
        echo " - - - SKIPPED: installing new Looma database"
    fi

    #       copy new files into "content" directory
    echo
    echo "****************************************************************"
    echo "- preparing to copy new files into content directory"
    echo -n  "- - continue ('y' recommended) [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
       SECONDS=0

        dosync "$FROMDIR/content"   "$TODIR/content"

        # uncomment to sync the maps [usually they dont change]
        # dosync "$FROMDIR/maps2018/"  "$TODIR/maps2018"

        # uncomment to sync ePaath [usually doesnt change]
        # dosync "$FROMDIR/ePaath/"    "$TODIR/ePaath"

        echo "$(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds elapsed."

    else
        echo " - - - SKIPPED: installing new Looma content"
    fi

  echo "Total $(( ($SECONDS + $CUMULATIVE) / 60)) minutes and $(( ($SECONDS + $CUMULATIVE)  % 60)) seconds elapsed."

# set permissions on Looma code and content

  echo; echo "****************************************************************"
  echo "setting permissions on Looma code and content"
  chmod -R 777 "$TODIR/Looma"
  chmod -R 777 "$TODIR/content"

echo
echo "****************************************************************"
echo "****************************************************************"
 if [[ $1 = "run" ]]
 then
    echo "DONE - LOOMA UPDATE: updating Looma code, database and content"
 else
    echo "DONE - LOOMA UPDATE DRY RUN:  no files were changed"
 fi
echo "****************************************************************"
echo "****************************************************************"
echo
echo

