#!/bin/bash
#
#  filename: loomaupdater
#       VERSION 6.0 for rysnc.net
#       author: skip
#       date:   SEP 2021, FEB 2024
#
#     revised OCT 2023 to check 'archivetimestamp.txt' to see if an update is needed
#       on both /Looma and /content
#
#  used to update a pre-installed Looma by installing latest code, database & content
#           only changed or brand new files are transferred
#
#   source files to be updated may be
#    - on a USB stick at /media/odroid/LOOMA/loomaupdate (the "U" option)
#    - or, on the Internet at rsync.net (the "I" option)
#
#   file structure expected if on the USB:
#
#       Looma/               (full set of new Looma code)
#       Looma/mongo-dump/dump/looma/   (latest mongodump of the new database content)
#       content/*   (folders with new content)
#                   (these are usually NEW folders,
#                      but this can be used to overwrite existing content folders)
#    optionally other content folders by uncommenting code below, like
#       maps2018/*
#       ePaath/*
#    or other content folders
#
#   steps performed:
#.      set proper directory to download to
#       sync newer code files into existing Looma code
#       use mongorestore to load new data into the existing mongo database
#                  (merging into some collections, like 'lessons' and 'text-files')
#       sync newer content files into "content" directory

#RSYNC options used:
#   -a  "archive" equivalent to -rlptgoD
#   -r  recursive
#   -l  recreate symlink on the destination
#   -p  preserve permissions
#   -t  preserve modification time
#   -g  preserve group
#   -o  preserve owner
#   -D  transfer devices and specials (NA for Looma)
#   -z  	use compression
#--dry-run
#--progress
#--size-only [for Content files]
#--delete 	delete files on destination that are not on source
#--perms (=== -p)
#--update   skip files if destination  already exists and has a later date
#--exclude '.[!.]*'
#--stats    print stats at the end

# not used
#    -v	    verbose
#    -vv	  very verbose
#    --progress show transfer progress

# display result of previous  command
result () {
    if [[ $1 -ne 0 ]]
    then
        echo "****************************************************************"
        echo "ERROR: previous operation returned $1"
    else
        echo "****************************************************************"
        echo "operation successful"
    fi
}  #  end result()

pause () {
   read -p "Paused, press [Enter] to continue"
}  #  end pause()

backup () {
    echo
    echo "****************************************************************"
    echo "- preparing to backup current LOOMA CODE to LoomaBAK"
    echo "-   *** usually it is OK to skip this step to save time"
    echo -n  "- - continue ('n' recommended) [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
        if [ -d "$TODIR/LoomaBAK" ]
        then
          echo "- deleting old LoomaBAK directory"
          sudo rm -r "$TODIR/LoomaBAK"
          result $?
        fi
        mv    "$TODIR/Looma"   "$TODIR/LoomaBAk"
        result $?
    else
        echo " - - - SKIPPED: backing up Looma code "
    fi
}  #  end backup()

checknetworkspeed () {
  # test internet presence and speed
    echo "************************************"
    echo "Testing network connection and speed"
    echo "************************************"
    echo
    t=$(date +%s)
    wget ftp://speedtest.tele2.net/10MB.zip -O /dev/null > /dev/null
    r=$?
    s=$(date +%s)
    if [[ $r -ne 0 ]]
    then
        echo "****************************************************************"
        echo "no internet connection found";exit $r;
    else
        echo "****************************************************************"
        echo -n "Internet speed is MB/s: ";expr 8 \* 10 / $(($s - $t))
        echo -n  "- - continue at this speed [y/n]?"; read input;
        if [[ $input != "y" ]]
        then
            exit 1
        fi
    fi
}  #  end checknetworkspeed()


# check if the timestamp of current files is same as timestamp of the archive
# return 1 if timestamps are equal [so no update is needed]
checktimestamp () {
  #echo "  *** *** if prompted for \"password:\" enter \"looma\"  *** ***"
  if [[ $source = "I" ]]
  then
    if [[ -f $TO/$DIR/archivetimestamp.txt ]]
    then
      current=`cat $TO/$DIR/archivetimestamp.txt`
    else
      current=""
    fi

  # latest=                 `ssh $FROM cat ../$DIR/archivetimestamp.txt`
    latest=`sshpass -p looma ssh $FROM cat ../$DIR/archivetimestamp.txt`

    if [[ $current = $latest ]] 
    then
      echo "current timestamp for $DIR is $current"
      echo "latest timestamp for archive is $latest"
      return 1
    fi
  else
    if [[ -f $TO/$DIR/archivetimestamp.txt ]]
    then
      current=`cat $TO/$DIR/archivetimestamp.txt`
    else
      current=""
    fi

    latest=`cat $FROM/$DIR/archivetimestamp.txt`
    if [[ $current = $latest ]] 
    then
      echo "current timestamp for $DIR is $current"
      echo "latest timestamp for archive is $latest"
      return 1
    fi
  fi
  return 0
}  #  end checktimestamp()

#function DOSYNC() to exec the rsync. global var $DRYRUNMODE is either "--dry-run" or ""
# call dosync() with $1 = the source , $2 = the target $3 = the directory, $4 = "--sizeonly" or null
dosync () {
    FROM=$1
    TO=$2
    DIR=$3
    SIZEONLY=$4

    echo;

    checktimestamp
    if [[ $? = 1 ]]
      then
        echo "++++++++++++++++++++++++"
        echo "$TO/$DIR is UP TO DATE [No files are being transferred]"
        echo "++++++++++++++++++++++++"
        return 0
      fi

    if [[ $source = "I" ]]
    then
      remote=$FROM:..
    else
      remote=$FROM
    fi

    # avoids manual entry of password for rsync (doesnt work?0
    # RSYNC_PASSWORD="looma"

 if [[ $DRYRUNMODE = "--dry-run" ]]
    then
      echo "doing RSYNC from $remote to $TO/$DIR with --dry-run [no changes will be made]"
    else
      echo "doing RSYNC from $remote to $TO/$DIR"
    fi
    echo
    #echo "  *** *** if prompted for \"password:\" enter \"looma\"  *** ***"

      # NOTE, adding "O" option to avoid errors wioth modified date updates
    sshpass -p 'looma' rsync -azO  $DRYRUNMODE $SIZEONLY  \
        --stats  \
        --perms  --chmod=D777,F777 --chown=looma:looma \
        --exclude '.[!.]*' --delete --delete-excluded   \
        -e "ssh"   \
       "$remote/$DIR/"  "$TO/$DIR"
      # NOTE: RSYNC needs a slash after FROM dir and no slash after TO dir

  if [[ $DRYRUNMODE != "--dry-run" ]]
     then    echo
     echo "**************************"
     echo "setting $TO/$DIR/archivetimestamp.txt to $latest"
     echo $latest > $TO/$DIR/archivetimestamp.txt
     echo
  fi
}  #  end dosync()

######
######### start of executed code ##########
######
echo
echo "****************************************************************"
echo "START LOOMA UPDATE: updating Looma code, database and content"
echo "****************************************************************"
echo "this a DANGEROUS operation and can disable a Looma"
echo "Be sure you have read the instructions"
echo "****************************************************************"


if [[ $2 = "dryrun" ]]
  then
    DRYRUNMODE="--dry-run"
  else
    DRYRUNMODE=""
fi

CUMULATIVE=0

#####################
##################### user input - choose update from USB stick or from Internet
#####################
echo; echo "****************************************************************"
echo "- Update using Internet connection or USB memory?"
echo -n  "- -enter  U for USB, I for internet [I/U]?"; read source

if [[ $source = "U" ]]
then

###########################  sourcing from USB - settings  #############

  FROMDIR="/media/odroid/LOOMA/loomaupdate"

      echo; echo "****************************************************************"
      echo "    you must insert a USB memory stick which is named LOOMA"
      echo "    be sure the USB filesystem format is FAT32 or exFAT    [*** not NTFS ***]"
      echo "    the USB stick must have the files to be uploaded stored in a top-level folder named 'loomaupdate' "
      echo "****************************************************************"

      cd "$FROMDIR" # for Linux (different for MAC)

      if [ "$?" -ne 0 ]
      then
          echo; echo "ERROR: couldn't find LOOMA/loomaupdate directory on USB"
          exit 1
      fi

      echo
      echo -n  "- using this directory to get new files: ";pwd
      echo

###########################  sourcing from the Internet-  settings ###############

  elif [[ $source = "I" ]]
  then
      FROMDIR="58191@usw-s008.rsync.net"

    echo; echo "****************************************************************"
    echo "-   *** you can check network speed before proceeding"
    echo -n  "- - check and report network speed [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
      checknetworkspeed
    fi
  else
      echo; echo "****************************************************************"
      echo 'ERROR: input must be "U" or "I"'
      echo "****************************************************************"
      exit 1
  fi

########################### set the target directory ###############E

echo "********************"

  if [ $# -eq 0 ]
    then
     TODIR="/var/www/html"
    else
     TODIR=$1
  fi

   if [ ! -d $TODIR/Looma ];
     then
       echo "Target directory does not contain a /Looma folder"
       exit
    fi

###########################  do the transfers ###############

#       copy current Looma code to LoomaBAK
#       NOTE: call to function DACKUP() commented out for now
    # backup

    # echo; echo "if prompted for \"password for odroid\" enter \"odroid\"  "

    #       install new Looma code
    echo
    echo "****************************************************************"
    echo "- preparing to update LOOMA CODE"
    echo -n  "- - continue ('y' recommended) [y/n]?"; read input;
    if [[ $input = "y" ]]
    then

        #*************RSYNC*********************
        SECONDS=0

        #  for CODE we call dosync() with $4 (size-only) = null
         echo
         echo "starting to update code files. please wait ..."
         echo

        dosync    "$FROMDIR"  "$TODIR" "Looma"

        echo "$(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds elapsed."
        CUMULATIVE=$SECONDS

        #clear browser cache so the new code files will be used
       # if [[  -f "$TODIR/Looma/looma shell scripts/loomaClearChromiumCache" ]]
        #then
         # source "$TODIR/Looma/looma shell scripts/loomaClearChromiumCache"
        #fi
    else
        echo " - - - SKIPPED: installing new Looma code"
    fi

    #       install new Looma database
#    echo
#    echo "****************************************************************"
 #   echo "- preparing to update LOOMA DATABASE"
 #   echo "-   ***note: this will NOT erase any lesson plans or text files already in the database"
 #   echo -n  "- - continue ('y' recommended) [y/n]?"; read input;

#    if [[ $input = "y" ]]
#    then

    if [[ -d "$TODIR/Looma/mongo-dump/dump/looma" ]]
        then

            # [mongorestore doesnt update existing mongoDB documents that have changes]
            # to fix this, we use the following procedure:
            #     temp save locally created documents (lessons and texts)
            #     update all documents to latest version from the looma archive
            #     then re-load the locally created documents
            # mongoexport collections 'lessons' and 'text_files' to temp files
            # drop db 'looma' so mongorestore from archives will update all documents in the db
            # mongorestore db looma dump from looma archive on USB
            # finally, mongoimport the temp files to collectons 'lessons' and 'text_files'
            #      to re-instate locally created lessons and texts

            #mongoexport --quiet --db looma --collection lessons --out /tmp/lessonsFromMongo.tmp
            #mongoexport --quiet --db looma --collection text_files --out /tmp/textsFromMongo.tmp

            echo
            echo "starting to update Looma's database. please wait ..."
            echo
            mongo --eval "db.dropDatabase();" looma
            mongorestore --quiet --db looma "$TODIR/Looma/mongo-dump/dump/looma/"

            #mongoimport --quiet --db looma --collection lessons --file /tmp/lessonsFromMongo.tmp
            #mongoimport --quiet --db looma --collection text_files --file /tmp/textsFromMongo.tmp

            #rm /tmp/lessonsFromMongo.tmp
            #rm /tmp/textsFromMongo.tmp

            mongoimport --db loomausers --collection logins  --mode upsert --file "$TODIR/Looma/mongo-dump/logins/defaultlogins.json"
            rm "$TODIR/Looma/mongo-dump/logins/defaultlogins.json"

            result $?
        else echo "ERROR: no source dir ($TODIR/Looma/mongo-dump/dump/looma) for mongo restore"
        fi
 #   else
 #       echo " - - - SKIPPED: installing new Looma database"
 #  fi

    #       copy new files into "content" directory
    echo
    echo "****************************************************************"
    echo "- preparing to update files in CONTENT directory"
    echo -n  "- - continue ('y' recommended) [y/n]?"; read input;
    if [[ $input = "y" ]]
    then
       SECONDS=0

        #  for CONTENT calling dosync() with $4 (size-only) = "--size-only"
        echo
        echo "starting to update content files. this takes a long time. please wait ..."
        echo
        dosync "$FROMDIR"  "$TODIR"  "content" "--size-only"

        # uncomment to sync the maps [usually they dont change]
        # dosync "$FROMDIR"  "$TODIR" "maps2018" "--size-only"

        # uncomment to sync ePaath [usually doesnt change]
        # dosync "$FROMDIR"    "$TODIR" "ePaath" "--size-only"

        echo "$(($SECONDS / 60)) minutes and $(($SECONDS % 60)) seconds elapsed."

    else
        echo " - - - SKIPPED: installing new Looma content"
    fi

  echo "Total $(( ($SECONDS + $CUMULATIVE) / 60)) minutes and $(( ($SECONDS + $CUMULATIVE)  % 60)) seconds elapsed."

echo
echo "****************************************************************"
echo "****************************************************************"
 if [[ $DRYRUNMODE = "--dry-run" ]]
 then
    echo "DONE - LOOMA UPDATE DRY RUN:  no files were changed"
 else
    echo "DONE - LOOMA UPDATE: updating Looma code, database and content"
 fi
echo "****************************************************************"
echo "****************************************************************"

