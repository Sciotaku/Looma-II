// filename: fixCH_IDs
//
// ONE TIME program to fix CH_IDs
//          trim leading and trailing blanks from activities' ch_id's and nch_id's
//          converts scalar ch_id fields to array
//          also removes null, undefined or "" ch_ids
//          remove ch_id if empty array
//         [REMOVED] also removes ch_ids that dont match the CH_IDregex
//
//  run in MONGO SHELL with: load('fixCH_IDs')
//
var cursor, count, fixcount, doc, output;
var ch_set;
// need to remove "", null, undefined, and illegal ch_id's (e.g. text like "People")
var CH_IDregex = /([1-9]|10|11|12)(EN|Ena|Sa|S|SF|Ma|M|SSa|SS|N|H|V|CS)[0-9]{2}(\.[0-9]{2})?/;

cursor = db.activities.find({});
count = 0; fixcount = 0;

while (cursor.hasNext()) {
    doc = cursor.next();
    count++;

    if (doc['ch_id'] && doc['dn']) {
        fixcount++;
        if (!(Array.isArray(doc['ch_id']))) {
            //print ('converting ' + doc['ch_id']);
            doc['ch_id'] = [doc['ch_id']];
        };
        
        ch_set = new Set();
        if (doc['ch_id'].length > 0) {
            var len = doc['ch_id'].length;
            for ( var i=0; i<len; i++)
            {   var ch = doc['ch_id'][i];
                //print(ch + ' is ' + typeof ch);
                //print('     of len ' + ch.length );
                if ( ch !== "" && !(ch.match(/INAP/))
                    && !(ch.match(/india/))
                ) {
                    ch_set.add(ch);
                    //print ('adding ' + ch);
                } else print('NOT PROCESSED ' + doc['dn'] + '  ' + doc['ch_id'][i]);
            }
        };
        //print('ch_set is ' + ch_set + ' len ' + ch_set.length);
        
        if (ch_set.size > 0)  {
            doc['ch_id'] = Array.from(ch_set);
            output  = '...' + doc['dn'] + '...nch_ids ...[' + doc['nch_id'][0];
            for ( var i=1;i<doc['nch_id'].length;i++) { output += ', ' + doc['nch_id'][i];}
            output +=']';
            print(output);
        }
        else {
            print ('*********   *************   deleting ch_id for ' + doc['dn']);
            delete doc['ch_id'];
        }
    };
    
    if (doc['nch_id'] && doc['ndn']) {
        fixcount++;
        if (!(Array.isArray(doc['nch_id']))) {
            //print ('converting ' + doc['nch_id']);
            doc['nch_id'] = [doc['nch_id']];
        };
        
        ch_set = new Set();
        if (doc['nch_id'].length > 0) {
            var len = doc['nch_id'].length;
            for ( var i=0; i<len; i++)
            {   var ch = doc['nch_id'][i];
                //print(ch + ' is ' + typeof ch);
                //print('     of len ' + ch.length );
                if ( ch !== "" && !(ch.match(/INAP/))
                    && !(ch.match(/india/))
                ) {
                    ch_set.add(ch);
                    //print ('adding ' + ch);
                } else print('NOT PROCESSED ' + doc['dn'] + '  ' + doc['nch_id'][i]);
            }
        };
        //print('ch_set is ' + ch_set + ' len ' + ch_set.length);
        
        if (ch_set.size > 0)  {
            doc['nch_id'] = Array.from(ch_set);
            output  = '...' + doc['dn'] + '...nch_ids ...[' + doc['nch_id'][0];
            for ( var i=1;i<doc['nch_id'].length;i++) { output += ', ' + doc['nch_id'][i];}
            output +=']';
            print(output);
        }
        else {
            print ('*********   *************   deleting nch_id for ' + doc['dn']);
            delete doc['nch_id'];
        }
    };
    if (param === 'run') db.activities.replaceOne({_id:doc._id}, doc);
};

print('_______________');
print(' + + + checked ' + count + ' activities');
print(' + + + found ' + fixcount + ' activities with ch_ids and/or nch_ids');
print('_______________');
