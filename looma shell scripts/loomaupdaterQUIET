#!/bin/bash
#
#  filename: loomaupdaterQUIET
#  file location: "/var/www/html/Looma/looma shell scripts"
#  called from looma-update.php
#
#       VERSION 6.0 for rysnc.net
#       author: skip
#       date:   AUG 2023
#
#  used to update a pre-installed Looma by installing latest code, database & content
#           only changed or brand new files are transferred
#
#       THIS VERSION OF loomaupdater IS ACCESSED FROM THE LOOMA TOOLS PAGE
#       IT RUNS SILENTLY, /// AND RE-BOOTS THE LOOMA WHEN COMPLETES ///
#       PUTS ERROR AND LOG MESSAGES IN xxxxx FILE
#
#   steps performed:
#       sync newer code files into existing Looma code
#       use mongorestore to load new data into the existing mongo database
#                  (merging into some collections, like 'lessons' and 'text-files')
#       [optional] if $1="includecontent" then sync newer content files into "content" directory

#RSYNC options used:
#   -a  "archive" equivalent to -rlptgoD
#   -r  recursive
#   -l  recreate symlink on the destination
#   -p  preserve permissions
#   -t  preserve modification time
#   -g  preserve group
#   -o  preserve owner
#   -D  transfer devices and specials (NA for Looma)

#   -v	    verbose
#-vv	very verbose
#-z  	use compression
#--dry-run
#--size-only [for Content files]
#--delete 	delete files on destination that are not on source
#--perms (=== -p)
#--update   skip files if destination  already exists and has a later date
#--include '.ssh'
#--exclude '.[!.]*'
#--progress show transfer progress
#--stats    print stats at the end

# display result of previous  command
result () {
    if [[ $1 -ne 0 ]]
    then
        echo "****************************************************************"
        echo "ERROR: previous operation returned $1"
    else
        echo "****************************************************************"
        echo "operation successful"
    fi
}

pause () {
   read -p "Paused, press [Enter] to continue"
}

backup () {
        if [ -d "$TODIR/LoomaBAK" ]
        then
          sudo rm -r "$TODIR/LoomaBAK"
        #  result $?
        fi
        mv    "$TODIR/Looma"   "$TODIR/LoomaBAk"
        #  result $?
}

checknetworkspeed () {
  # test internet presence and speed
    echo "************************************"
    echo "Testing network connection and speed"
    echo "************************************"
    echo
    t=$(date +%s)
    sudo wget ftp://speedtest.tele2.net/10MB.zip -O /dev/null
    r=$?
    s=$(date +%s)
    if [[ $r -ne 0 ]]
    then
        echo "****************************************************************"
        echo "no internet connection found";exit $r;
    else
        echo "****************************************************************"
       # echo -n "Internet speed is MB/s: ";expr 8 \* 10 / $(($s - $t))
        echo -n  "- - continue at this speed [y/n]?"; read input;
        if [[ $input != "y" ]]
        then
            exit 1
        fi
    fi
}

log() {
  echo $1 >> /tmp/loomaupdatelog
}

#function DOSYNC() to exec the rsync.
# call dosync() with $1 = the source directory, $2 = the target directory
dosync () {
    FROM=$1
    TO=$2
    SIZEONLY=$3
    RSYNC_PASSWORD="looma"

    # NOTE: RSYNC needs a slash after FROM dir and no slash after TO dir
    rsync -az  \
        --stats  --progress   \
        --perms  --chmod=D777,F777 --chown=looma:looma \
        --exclude '.[!.]*' --delete --delete-excluded   \
        -e "ssh"   \
       "$FROM/"  "$TO"
}

######
######### start of executed code ##########
######

CUMULATIVE=0
TODIR="/var/www/html"

### WRITE TO LOG FILE: date, ip address, [network speed?]

###########################  do the transfers ###############

        SECONDS=0
        #  for CODE calling dosync() with $3 (size-only) = null
        dosync    "$FROMDIR/Looma"  "$TODIR/Looma"
        log $SECONDS

        #clear browser cache so the new code files will be used
        source "$TODIR/Looma/looma shell scripts/loomaClearChromiumCache"

    #       install new Looma database

if [[ -d "$TODIR/Looma/mongo-dump/dump/looma" ]]

        then

            # [mongorestore doesnt update existing mongoDB documents that have changes]
            # to fix this, we use the following procedure:
            #     temp save locally created documents (lessons and texts)
            #     update all documents to latest version from the looma archive
            #     then re-load the locally created documents
            # mongoexport collections 'lessons' and 'text_files' to temp files
            # drop db 'looma' so mongorestore from archives will update all documents in the db
            # mongorestore db looma dump from looma archive on USB
            # finally, mongoimport the temp files to collectons 'lessons' and 'text_files'
            #      to re-instate locally created lessons and texts

            mongoexport --db looma --collection lessons --out /tmp/lessonsFromMongo.tmp
            mongoexport --db looma --collection text_files --out /tmp/textsFromMongo.tmp

            mongo --eval "db.dropDatabase();" looma
            mongorestore --quiet --db looma "$TODIR/Looma/mongo-dump/dump/looma/"

            mongoimport --quiet --db looma --collection lessons --file /tmp/lessonsFromMongo.tmp
            mongoimport --quiet --db looma --collection text_files --file /tmp/textsFromMongo.tmp

            rm /tmp/lessonsFromMongo.tmp
            rm /tmp/textsFromMongo.tmp

            mongoimport --db loomausers --collection logins --file "$TODIR/Looma/mongo-dump/logins/defaultlogins.json"
            rm "$TODIR/Looma/mongo-dump/logins/defaultlogins.json"

        #    result $?
  fi


    #       OPTIONAL copy new files into "content" directory

    if [[ $1 = "includecontent" ]]
    then
       SECONDS=0
       dosync "$FROMDIR/content"   "$TODIR/content" "--size-only"
       log $SECONDS
    fi


# REBOOT the SYSTEM [any way to only reboot if there were no errors?]
#    reboot

